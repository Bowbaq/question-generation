#!/usr/bin/python

import sys
import os.path
import subprocess
from queditdistance import processquestions

def init():
    args = sys.argv[1:]
    valid_args = True
    
    if len(args) < 2:
        valid_args = False
        print "Usage: ./answer <path/to/article> <path/to/questions>"
        sys.exit(-1)
    
    for arg in args:
        if not os.path.isfile(arg):
            valid_args = False
            print arg, "is not a valid file"
    
    if valid_args:
        return args[0], args[1]
    else:
        sys.exit(1)

def run_question_asker(path):
    cmd = './scripts/run.sh question-asker --debug 2>/dev/null < %s' % path
    output = subprocess.check_output(cmd, shell=True)

    questions = []
    answers = []
    for line in output.split('\n'):
        if line.strip() == '':
            continue
        
        question, sentence, answer, score = line.strip().split('\t')
        questions.append(question)
        answers.append(sentence)

    return questions, answers
    
def run_question_answerer(data):
    cmd = './scripts/run.sh question-answerer 2>/dev/null'
    p = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate('\n'.join(data))
    
    return stdout

def parse_output(output):
    questions = []
    postags = []
    dependencies = []
    sstags = []
    
    for part in output.strip().split('\n\n'):
        question, pos, deps, ss = part.split('\n')
        
        questions.append(question);
        postags.append(pos[1:-1].split(', '))
        
        # print deps[1:-1]
        over_split = deps[1:-1].split(', ')
        dep_list = []
        current_dep = ''
        for dep_part in over_split:
            if current_dep == '':
                current_dep = dep_part + ', '
            elif dep_part[-1] == ')':
                dep_list.append(current_dep + dep_part)
                current_dep = ''
            else:
                current_dep += dep_part + ', '
        
        dependencies.append(dep_list)
        
        sstags.append(ss[1:-1].split(', '))
    
    return {
        'questions': questions,
        'postags': postags,
        'deptags': dependencies,
        'sstags': sstags
    }    
    
article_path, questions_path = init()

generated_questions, generated_answers = run_question_asker(article_path)

with open(questions_path) as asked_questions_file:
    asked_questions = asked_questions_file.read().split('\n')

    generated_questions_output = run_question_answerer(generated_questions)
    asked_questions_output = run_question_answerer(asked_questions)
    
    processquestions(parse_output(asked_questions_output),  parse_output(generated_questions_output), generated_answers)